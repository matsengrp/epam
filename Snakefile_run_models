import epam.models
import subprocess

# Read parameters from the config file
dataset = config["dataset"]
number_of_batches = config["number_of_batches"]
pcp_per_batch = config["pcp_per_batch"]
pcp_input = config["pcp_input"]

model_name_to_spec = {
    model_name: [model_class, str({**model_params, "model_name": model_name})]
    for model_name, model_class, model_params in epam.models.FULLY_SPECIFIED_MODELS 
}

batch_number = range(1, number_of_batches+1)

rule all:
    input:
        expand("output/{pcp_input}/{model_name}/combined_aaprob.hdf5", pcp_input=config["pcp_input"], model_name=model_name_to_spec.keys()),


rule run_models:
    input:
        in_csv="pcp_batched_inputs/{pcp_input}_{part}.csv",
        hdf5_path="pcp_batched_inputs/{pcp_input}_esm1_mask_ratios_{part}.hdf5",
    output:
        aaprob="output/{pcp_input}/{model_name}/batch{part}/aaprob.hdf5",
    params:
        part=lambda wildcards: wildcards.part,
        model_class=lambda wildcards: model_name_to_spec[wildcards.model_name][0],
        model_params=lambda wildcards: model_name_to_spec[wildcards.model_name][1],
    benchmark:
        "output/{pcp_input}/{model_name}/batch{part}/timing.tsv"
    shell:
        """
        mkdir -p output/{wildcards.pcp_input}/{wildcards.model_name}/batch{params.part}
        epam aaprob {params.model_class} "{params.model_params}" {input.in_csv} {output.aaprob} {input.hdf5_path}
        """


rule combine_aaprob_files:
    input:
        expand(
            "output/{{pcp_input}}/{{model_name}}/batch{part}/aaprob.hdf5",
            part=batch_number,
        ),
    output:
        "output/{pcp_input}/{model_name}/combined_aaprob.hdf5",
    run:
        input_files = ",".join(input)
        output_file = output[0]
        
        subprocess.run(
            f"epam concatenate_hdf5s {input_files} {output_file}", shell=True, check=True
        )

